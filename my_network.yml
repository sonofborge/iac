AWSTemplateFormatVersion: 2010-09-09

Description:
  Creates a VPC and its low-level networking components including subnets, gateways, and routes.

Parameters:
  Name:
    Type: String
    Description: A prefix unique to this VPC that helps to qualify its purpose or owner.
    AllowedPattern: ^[a-zA-Z -]+$
  CidrBlock:
    Type: String
    Description: CIDR address range for the entire VPC.
    AllowedPattern: ((\d{1,3})\.){3}\d{1,3}/\d{1,2}
    Default: 10.1.0.0/16

Resources:
  ##
  # Virtual Private Cloud
  #
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref CidrBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Ref Name

  ##
  # Internet Gateway
  #
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${Name} Internet Gateway
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  ##
  # Subnets
  #
  # Public
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.10.0/24 # TODO: !Ref CiderBlockA
      AvailabilityZone: !Select [ 0, Fn::GetAZs ]
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Public-A
  # Private
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.50.0/24
      AvailabilityZone: !Select [ 0, Fn::GetAZs ]
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Private-A

  ##
  # Routing Tables
  #
  # Public
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public
  PublicRoute1: # public route table has direct routing to internet gateway
    Type: AWS::EC2::Route
    # An error will occur if we attempt to build a route table entry to an unattached gateway. To eliminate this error,
    # we let CloudFormation know about this dependency and it will not attempt to build this route table entry until
    # after the InternetGatewayAttachment resource is created.
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  # Private
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Private
  PrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

  ##
  # We do not want instances within our private subnets to be reachable from the public internet. But we do want these
  # instances to be able to initiate outbound connections, such as downloads.  Plus we want them to be able to do this
  # without having public IP addresses.
  #
  # COST: NAT Gateways, unlike everything else so far, are not free.
  #       https://aws.amazon.com/vpc/pricing/
  #
  # A NAT Gateway, ladies and gentlemen.
  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ElasticIPAddress.AllocationId
      SubnetId: !Ref PublicSubnetA
      Tags:
        - Key: Name
          Value: !Sub NAT-${AWS::StackName}
  ElasticIPAddress:
    Type: AWS::EC2::EIP
    Properties:
      Domain: VPC

  ##
  # Without these associations, your subnets will use a "main" route table associated with the VPC, which is not part
  # of our template. Better to have explicit route tables and associations.
  #
  # Attach the subnets to route tables.
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTable
